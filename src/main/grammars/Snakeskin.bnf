{
	parserClass="idea.snakeskin.lang.parser.SnakeskinParser"

	extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

	psiClassPrefix="Ss"
	psiImplClassSuffix="Impl"
	psiPackage="idea.snakeskin.lang.psi"
	psiImplPackage="idea.snakeskin.lang.psi.impl"

	elementTypeHolderClass="idea.snakeskin.lang.psi.SsElementTypes"

	elementTypeClass="idea.snakeskin.lang.psi.SsElementType"
	tokenTypeClass="idea.snakeskin.lang.psi.SsTokenType"

	extends(".*Expression")=Expression

	tokens=[
		BRACE_OPEN  = '{'
		BRACE_CLOSE = '}'
		BRACK_OPEN  = '['
		BRACK_CLOSE = ']'
		PAREN_OPEN  = '('
		PAREN_CLOSE = ')'
		ML_OPEN     = '&'
		ML_CLOSE    = '.'
		COLON       = ':'
		SEMICOLON   = ';'
		COMMA       = ','
		DOT         = '.'
		EQ          = '='
		EQ_EQ       = '=='
		EQ_EQ_EQ    = '==='
		SHARP       = '#'
		EXCLAMATION = '!'
		NOT_EQ      = '!='
		NOT_EQ_EQ   = '!=='
		PLUS        = '+'
		PLUS_PLUS   = '++'
		PLUS_EQ     = '+='
		MINUS       = '-'
		MINUS_MINUS = '--'
		MINUS_EQ    = '-='
		PIPE        = '|'
		PIPE_PIPE   = '||'
		PIPE_EQ     = '|='
		AMP         = '&'
		AMP_AMP     = '&&'
		AMP_EQ      = '&='
		TILDE       = '~'
		LT          = '<'
		LT_EQ       = '<='
		CARET       = '^'
		CARET_EQ    = '^='
		ASTERISK    = '*'
		ASTERISK_EQ = '*='
		SLASH       = '/'
		SLASH_EQ    = '/='
		PERCENT     = '%'
		PERCENT_EQ  = '%='
		GT          = '>'
		GT_EQ       = '>='
		ARROW       = '->'
		FAT_ARROW   = '=>'
		QUESTION    = '?'
		AT          = '@'
		UNDERSCORE  = '_'
		DOLLAR      = '$'
		AT_BRACK    = '@['
		AT_AT_BACK  = '@@['
		BRACE_OPEN_OPEN = '{{'
		BRACE_CLOSE_CLOSE = '}}'
		LT_LT_EQ    = '<<='
		GT_GT_EQ    = '>>='
		GT_GT_GT_EQ = '>>>='
		LT_LT       = '<<'
		GT_GT       = '>>'
		GT_GT_GT    = '>>>'
	]
}

Snakeskin ::= GlobalIndent*
GlobalStatement ::= GlobalVerboseStatement | GlobalShortStatement
// Snakeskin allows global statements to start with different amount of spaces,
// e.g. the first one's without any spaces, the second one's with two spaces, the third one's with one space
GlobalIndent ::= GlobalStatement | GlobalBody
GlobalBody ::= INDENT GlobalStatement+ DEDENT
{ pin = 1 }

// The order of the rules is important
GlobalVerboseStatement ::= GlobalVerboseBlockStatementPart | GlobalVerboseInlineStatementPart

// The pin attribute in the next two rules is important for control directive recovering
private GlobalVerboseBlockStatementPart ::= StatementStart GlobalVerboseBlockStatement
private GlobalVerboseInlineStatementPart::= StatementStart GlobalVerboseInlineStatement StatementEnd
{ pin = 1 }

GlobalShortStatement ::= GlobalShortInlineStatement StatementEnd | GlobalShortBlockStatement

private Statement_recover ::= !StatementEnd
private Body_recover ::= !DEDENT

// TODO: Make it better. Just to create needed SsTokenTypes
private MultiLines ::= ML_CLOSE | ML_OPEN

//////////////////////////////
// GLOBAL INLINE STATEMENTS //
//////////////////////////////
GlobalVerboseInlineStatement ::= VerboseVariableStatement
	| DecoratorStatement
	| GlobalVariableStatement
	| NamespaceStatement
	| IncludeStatement
	| ImportStatement
	| VerboseVoidStatement
	| ThrowStatement
{ recoverWhile = Statement_recover}

GlobalShortInlineStatement ::= ShortVariableStatement | ShortVoidStatement
{ recoverWhile = Statement_recover }


/////////////////////////////
// GLOBAL BLOCK STATEMENTS //
/////////////////////////////
GlobalVerboseBlockStatement ::= GlobalBlockStatement
	| WithStatement
	| ConditionalStatement
	| SwitchStatement
	| LoopStatement
	| IteratorStatement
	| TryCatchStatement
	| VerboseFuncStatement
	| TargetStatement
	| VerbosePutInStatement

GlobalBlockStatement ::= GlobalBlockHead StatementEnd BlockBody?
GlobalBlockHead ::= HeadOrEvalHeadStatement
	| ExternalBlockHeadStatement
	| TemplateHeadStatement
{ recoverWhile = Statement_recover }

GlobalShortBlockStatement ::= ShortFuncStatement | ShortPutInStatement


BlockBody ::= INDENT BodyStatements DEDENT
{ pin = 1 }
private BodyStatements ::= BodyStatement+
{ recoverWhile = Body_recover }
BodyStatement ::= VerboseStatement
	| ShortStatement
	| XmlStatement
	| TemplateTextStatement
	| COMMENT_BLOCK

VerboseStatement ::= StatementStart (VerboseInlineStatement StatementEnd | VerboseBlockStatement)
{ pin = 1 }
VerboseInlineStatement ::= VerboseVariableStatement
	| ConstStatement
	| VerboseOutputStatement
	| VerboseVoidStatement
	| ThrowStatement
	| DoctypeStatement
	| SuperStatement
{ recoverWhile = Statement_recover }

VerboseBlockStatement ::= BlockStatement
	| ConditionalStatement
	| SwitchStatement
	| LoopStatement
	| IteratorStatement
	| TryCatchStatement
	| VerboseFuncStatement
	| TargetStatement
	| VerbosePutInStatement
	| VerboseCallStatement
	| ReturnStatement
	| WithStatement
	| TagStatement
	| AwaitStatement

ShortStatement ::= ShortInlineStatement StatementEnd | ShortBlockStatement
ShortInlineStatement ::= ShortVariableStatement
	| ShortOutputStatement
	| ShortVoidStatement
{ recoverWhile = Statement_recover }

ShortBlockStatement ::= ShortFuncStatement
	| ShortPutInStatement
	| ShortCallStatement


// Variables
VariableDeclarationsList ::= VariableDeclaration (VariableDeclarationsListTail)*
VariableDeclarationsListTail ::= ',' VariableDeclaration
{ pin = 1 }
VariableDeclaration ::= IDENTIFIER ('=' Expression)?
{ recoverWhile = VariableDeclaration_recover }
private VariableDeclaration_recover ::= !(',' | ';' | StatementEnd)

VerboseVariableStatement ::= var VariableDeclarationsList
{ pin = 1 }
ShortVariableStatement ::= ':' VariableDeclarationsList

// Global variables
GlobalVariableStatement ::= global? GlobalVariableDeclarationsList
GlobalVariableDeclarationsList ::= GlobalVariableDeclaration (GlobalVariableDeclarationsListTail)*
GlobalVariableDeclarationsListTail ::= ',' GlobalVariableDeclaration
{ pin = 1 }
GlobalVariableDeclaration ::= GlobalDeclarationIdentifier ('=' Expression)?
{ recoverWhile = GlobalVariableDeclaration_recover }
private GlobalVariableDeclaration_recover ::= !(',' | StatementEnd)
GlobalDeclarationIdentifier ::= GLOBAL_IDENTIFIER | IDENTIFIER | '[' Expression ']' | '@@[' Expression ']'

// Const
ConstStatement ::= const? ConstDeclaration '?'?
ConstDeclaration ::= IDENTIFIER '=' Expression

// Namespace
NamespaceStatement ::= namespace DefinitionQualifiedIdentifier
{ pin = 1 }

// Include
IncludeStatement ::= include Expression RenderAsExpression?
{ pin = 1 }
RenderAsExpression ::= as TemplateType

// Import
ImportStatement ::= import (ImportClause FromClause | ModuleSpecifier)
{ pin = 1 }
ImportClause ::= CombinedImport
	| DefaultImport
	| NamespaceImport
	| NamedImportsList
CombinedImport ::= DefaultImport ',' (NamespaceImport | NamedImportsList)
DefaultImport ::= IDENTIFIER
NamespaceImport ::= '*' as IDENTIFIER
NamedImportsList ::= '{' NamedImport (NamedImportsListTail)* '}'
NamedImportsListTail ::= ',' NamedImport
{ pin = 1 }
NamedImport ::= IDENTIFIER (as IDENTIFIER)?
{ recoverWhile = NamedImport_recover }
private NamedImport_recover ::= !(',' | '}')
FromClause ::= from ModuleSpecifier

ModuleSpecifier ::= STRING_LITERAL

// Output
VerboseOutputStatement ::= output Expression
ShortOutputStatement ::= '{' Expression '}'

// Void
VerboseVoidStatement ::= void Expression
{ pin = 1 }
ShortVoidStatement ::= '?' Expression
{ pin = 1 }

// Super
SuperStatement ::= super

// Throw
ThrowStatement ::= throw Expression

// Doctype
DoctypeStatement ::= doctype IDENTIFIER?

// Decorator
DecoratorStatement ::= ExecutionQualifiedIdentifier '(' ')'

// Template
TemplateHeadStatement ::= async? TemplateType '*'? DefinitionQualifiedIdentifier TemplateDeclarationTail?
{ pin = 2 }
TemplateDeclarationTail ::= FunctionParameters TemplateInheritance?
TemplateInheritance ::= extends QualifiedIdentifier
TemplateType ::= template | interface | placeholder

// Blocks
BlockStatement ::= BlockHeadStatement StatementEnd BlockBody?
BlockHeadStatement ::= block IDENTIFIER BlockHeadTail?
{ pin = 1; recoverWhile = Statement_recover }

ExternalBlockHeadStatement ::= block IDENTIFIER '->' IDENTIFIER BlockHeadTail?
{ pin = 1 }
BlockHeadTail ::= FunctionParameters BlockSelfCall?
BlockSelfCall ::=  ('=>' Expression)

// Eval&Head
HeadOrEvalHeadStatement ::= eval | head

// Conditionals
ConditionalStatement ::= MainConditionalStatement SecondaryConditionalStatement*
MainConditionalStatement ::= MainConditionalHead StatementEnd BlockBody?
MainConditionalHead ::= (if | unless) Expression
{ pin = 1; recoverWhile = Statement_recover }
SecondaryConditionalStatement ::= StatementStart SecondaryConditionalHead StatementEnd BlockBody?
{ pin = 1 }
SecondaryConditionalHead ::= else SecondaryConditionalHeadTail?
{ pin = 1; recoverWhile = Statement_recover }
SecondaryConditionalHeadTail ::= (if | unless) Expression


SwitchStatement ::= SwitchHead StatementEnd SwitchBlockBody?
SwitchHead ::= switch Expression
{ pin = 1; recoverWhile = Statement_recover }
SwitchBlockBody ::= INDENT SwitchBodyStatements DEDENT
{ pin = 1}
private SwitchBodyStatements ::= SwitchBodyStatement+
{ recoverWhile = Body_recover }

SwitchBodyStatement ::= SwitchCaseStatement StatementEnd BlockBody?
SwitchCaseStatement ::= VerboseSwitchCaseStatement | ShortSwitchCaseStatement
{ recoverWhile = Statement_recover }

VerboseSwitchCaseStatement ::= StatementStart (SwitchCaseHead | DefaultSwitchCaseHead)
{ pin = 1 }
SwitchCaseHead ::= case Expression
{ pin = 1 }
DefaultSwitchCaseHead ::= default

ShortSwitchCaseStatement ::= '>' Expression
{ pin = 1 }


// Loops
LoopStatement ::= ForLoopStatement
	| WhileLoopStatement
	| DoWhileLoopStatement

ForLoopStatement ::= ForLoopHead StatementEnd LoopBlockBody?
ForLoopHead ::= for (CommonForLoopHead | ForInLoopHead)
{ pin = 1; recoverWhile = Statement_recover }
CommonForLoopHead ::= CommonForLoopIndexDeclaration ';' Expression ';' Expression
{ pin = 2 }
CommonForLoopIndexDeclaration ::= var VariableDeclarationsList
ForInLoopHead ::= var IDENTIFIER in Expression
{ pin = 3 }

WhileLoopStatement ::= WhileLoopHead StatementEnd LoopBlockBody?
WhileLoopHead ::= while Expression
{ pin = 1; recoverWhile = Statement_recover }
DoWhileLoopStatement ::= do StatementEnd LoopBlockBody? (StatementStart while Expression StatementEnd)?
{ pin = 1 }

LoopBlockBody ::= INDENT LoopBodyStatements DEDENT
{ pin = 1 }
private LoopBodyStatements ::= LoopBodyStatement+
{ recoverWhile = Body_recover }
LoopBodyStatement ::= LoopControlStatement | BodyStatement
LoopControlStatement ::= StatementStart (break | continue)

// Iterators
IteratorStatement ::= IteratorHead StatementEnd LoopBlockBody?
IteratorHead ::= (FOREACH | FORIN) Expression '=>' IteratorParametersList
{ pin = 1; recoverWhile = Statement_recover }

// try/catch/finally
TryCatchStatement ::= TryStatement CatchFinallyStatement?
TryStatement ::= TryHead StatementEnd BlockBody?
TryHead ::= try
{ recoverWhile = Statement_recover }
CatchFinallyStatement ::= CatchStatement FinallyStatement?
CatchStatement ::= StatementStart CatchHead StatementEnd BlockBody?
CatchHead ::= catch IDENTIFIER
{ pin = 1; recoverWhile = Statement_recover }
FinallyStatement ::= StatementStart FinallyHead StatementEnd BlockBody?
FinallyHead ::= finally
{ recoverWhile = Statement_recover }

// Function
VerboseFuncStatement ::= VerboseFuncHead StatementEnd BlockBody?
VerboseFuncHead ::= func FunctionParametersList?
{ pin = 1; recoverWhile = Statement_recover }

ShortFuncStatement ::= ShortFuncHead StatementEnd BlockBody?
ShortFuncHead ::= '(' ')' ['=>' FunctionParametersList?]
{ pin = 1; recoverWhile = Statement_recover }

// Target
TargetStatement ::= TargetHead StatementEnd CallBlockBody?
TargetHead ::= target Expression [as IDENTIFIER]
{ pin = 1; recoverWhile = Statement_recover }

// PutIn
VerbosePutInStatement ::= VerbosePutInHead StatementEnd BlockBody?
VerbosePutInHead ::= var? PUT_IN QualifiedIdentifier?
{ pin = 2; recoverWhile = Statement_recover }

ShortPutInStatement ::= ShortPutInHead StatementEnd BlockBody?
ShortPutInHead ::= ':' PUT_IN QualifiedIdentifier?
{ pin = 1; recoverWhile = Statement_recover }

SuperShortPutInStatement ::= SuperShortPutInHead StatementEnd BlockBody?
SuperShortPutInHead ::= '*' QualifiedIdentifier?
{ pin = 1; recoverWhile = Statement_recover }

// Call
VerboseCallStatement ::= call Expression StatementEnd CallBlockBody?
ShortCallStatement ::= '+=' Expression StatementEnd CallBlockBody?

CallBlockBody ::= INDENT CallBodyStatements DEDENT
{ pin = 1 }
private CallBodyStatements ::= CallBodyStatement+
{ recoverWhile = Body_recover }
CallBodyStatement ::= SuperShortPutInStatement | BodyStatement

// Return
ReturnStatement ::= ReturnHead StatementEnd BlockBody?
ReturnHead ::= return Expression?
{ pin = 1; recoverWhile = Statement_recover }

// With
WithStatement ::= WithHead StatementEnd BlockBody?
WithHead ::= with Expression
{ pin = 1; recoverWhile = Statement_recover }

// Tags
TagStatement ::= TagHead StatementEnd BlockBody?
TagHead ::= Tags XmlAttrsList?
{ pin = 1; recoverWhile = Statement_recover }
Tags ::= CommonTag | SpecificTag
CommonTag ::= tag XmlTagName? XmlSelector?
{ pin = 1 }
SpecificTag ::= (script | style | link) XML_IDENTIFIER?

// Await
AwaitStatement ::= AwaitHead StatementEnd BlockBody?
AwaitHead ::= AWAIT Expression?
{ pin = 1; recoverWhile = Statement_recover }

// Parameters
IteratorParametersList ::= IteratorParameter IteratorParametersListTail*
IteratorParametersListTail ::= ',' IteratorParameter
{ pin = 1 }
IteratorParameter ::= IdentifierOrWithIdentifier
{ recoverWhile = IteratorParameter_recover }
private IteratorParameter_recover ::= !(',' | StatementEnd)

FunctionParameters ::= '(' FunctionParametersList? ')'
{ pin = 1 }
FunctionParametersList ::= FunctionParameter FunctionParametersListTail*
FunctionParametersListTail ::= ',' FunctionParameter
{ pin = 1 }
FunctionParameter ::= IdentifierOrWithIdentifier ('?' | '!')? ('=' Expression)?
{ recoverWhile = FunctionParameter_recover }
private FunctionParameter_recover ::= !(')' | ',' | StatementEnd)

// Qualified identifiers
// For template inheritance
QualifiedIdentifier ::= (IdentifierOrWithIdentifier | '[' (Expression | PLACEHOLDER) ']' | '@[' (Expression | PLACEHOLDER) ']') QualifiedIdentifierTail*
// For namespace and template definition
DefinitionQualifiedIdentifier ::= (IDENTIFIER | PLACEHOLDER | '[' (Expression | PLACEHOLDER) ']') QualifiedIdentifierTail*
// For template execution
ExecutionQualifiedIdentifier ::= (IdentifierOrWithIdentifier | '@[' Expression ']') QualifiedIdentifierTail*
QualifiedIdentifierTail ::= '.' (IDENTIFIER | PLACEHOLDER) | '[' (Expression | PLACEHOLDER) ']'

StatementStart ::= SHARP | MINUS
StatementEnd ::= EOS

// Interpolation
InterpolationStatement ::= INTERPOLATION_OPEN Expression? INTERPOLATION_CLOSE
{ pin = 1 }

// XML
XmlStatement ::= TAG_START XmlHead StatementEnd BlockBody?
{ pin = 1 }
XmlHead ::= XmlTagName? XmlSelector? XmlAttrsList?
{ recoverWhile = Statement_recover }
XmlTagName ::= XmlIdentifierStatement | '?'
XmlIdentifierStatement ::= XML_IDENTIFIER_PART_START? (InterpolationStatement XML_IDENTIFIER_PART_END?)+ | XML_IDENTIFIER
XmlSelector ::= CssClassSelector* CssIdSelector? CssClassSelector*
CssIdSelector ::= ID_SELECTOR_PART_START? (InterpolationStatement ID_SELECTOR_PART_END?)+ | ID_SELECTOR
CssClassSelector ::= CLASS_SELECTOR_PART_START? (InterpolationStatement CLASS_SELECTOR_PART_END?)+ | CLASS_SELECTOR

XmlAttrsList ::= XmlAttrDeclaration XmlAttrsListTail*
XmlAttrsListTail ::= '|' XmlAttrDeclaration
{ pin = 1 }
XmlAttrName ::= XmlIdentifierStatement
XmlAttrDeclaration ::= XmlAttrName ['=' XmlAttrValueStatement?]
{ recoverWhile = XmlAttrDeclaration_recover }
private XmlAttrDeclaration_recover ::= !('|' | StatementEnd)
XmlAttrValueStatement ::= ATTR_VALUE? (InterpolationStatement ATTR_VALUE?)+ | ATTR_VALUE

// Template text
TemplateTextStatement ::= TEMPLATE_TEXT? (TemplateInclusion TEMPLATE_TEXT?)* StatementEnd
TemplateInclusion ::= TemplateOutputStatement | TemplateLiteralStatement
TemplateOutputStatement ::= '{' Expression '}'
{ pin = 1 }
TemplateLiteralStatement ::= '{{' TemplateLiteralBody '}}'
{ pin = 1 }
TemplateLiteralBody ::= TEMPLATE_LITERAL? (InterpolationStatement TEMPLATE_LITERAL?)+ | TEMPLATE_LITERAL
{ recoverWhile = TemplateLiteralBody_recover }
private TemplateLiteralBody_recover ::= !('}}' | StatementEnd)

// Expressions
Expression ::= AssignmentExpression
	| AssignmentOperatorExpression
	| RelationExpression
	| EqualityExpression
	| ShiftExpression
	| AddGroup
	| BooleanGroup
	| MulGroup
	| BitGroup
	| PostfixGroup
	| PrefixGroup
	| UnaryGroup
	| FilterExpression
	| TernaryExpression
	| MemberExpression
	| NewExpression
	| VoidExpression
	| DeleteExpression
	| TypeofExpression
	| InExpression
	| InstanceofExpression
	| AwaitExpression
	| RegularExpression

AssignmentExpression ::= Expression '=' Expression { rightAssociative = true }

AssignmentOperatorExpression ::= Expression AssignmentOperator Expression { rightAssociative = true }
AssignmentOperator ::= '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '|=' | '^=' | '<<=' | '>>=' | '>>>='

RelationExpression ::= Expression RelationOperators Expression
RelationOperators ::= '<' | '>' | '<=' | '>='

EqualityExpression ::= Expression EqualityOperators Expression
EqualityOperators ::= '==' | '!=' | '===' | '!=='

ShiftExpression ::= Expression ShiftOperator Expression
ShiftOperator ::= '<<' | '>>' | '>>>'

private AddGroup ::= PlusExpression | MinusExpression
private BooleanGroup ::= IsNotExpression | XorExpression | AndExpression | OrExpression
private MulGroup ::= MulExpression | DivExpression | RemainderExpression
private BitGroup ::= BitNotExpression | BitAndExpression | BitOrExpression | BitXorExpression
private PostfixGroup ::= PostIncrementExpression | PostDecrementExpression
private PrefixGroup ::= PreIncrementExpression | PreDecrementExpression
private UnaryGroup ::= UnaryPlusExpression | UnaryMinusExpression
private PrimaryGroup ::= LiteralExpression
	| ArrayLiteralExpression
	| ObjectLiteralExpression
	| ParenthesesExpression
	| IdentifierGroup

PlusExpression ::= Expression '+' Expression
MinusExpression ::= Expression '-' Expression

IsNotExpression ::= '!' Expression
XorExpression ::= Expression '^' Expression
AndExpression ::= Expression '&&' Expression
OrExpression ::= Expression '||' Expression

MulExpression ::= Expression '*' Expression
DivExpression ::= Expression '/' Expression
RemainderExpression ::= Expression '%' Expression

BitNotExpression ::= '~' Expression
BitAndExpression ::= Expression '&' Expression
BitOrExpression ::= Expression '|' Expression
BitXorExpression ::= Expression '^' Expression

PostIncrementExpression ::= Expression '++'
PostDecrementExpression ::= Expression '--'

PreIncrementExpression ::= '++' Expression
PreDecrementExpression ::= '--' Expression

UnaryPlusExpression ::= '+' Expression
UnaryMinusExpression ::= '-' Expression

FilterExpression ::= Expression FILTER_PIPE '!'? MemberExpression FilterArgumentsList?
FilterArgumentsList ::= FilterArgument FilterArgumentsListTail*
FilterArgumentsListTail ::= ',' FilterArgument
{ pin = 1 }
FilterArgument ::= Expression
{ recoverWhile = FilterArgument_recover }
private FilterArgument_recover ::= !(',' | StatementEnd)

LiteralExpression ::= NULL_LITERAL
	| UNDEFINED_LITERAL
	| BOOLEAN_LITERAL
	| STRING_LITERAL
	| NUMERIC_LITERAL

IdentifierGroup ::= GLOBAL_IDENTIFIER
 | '@@[' Expression ']'
 | WITH_IDENTIFIER
 | '@[' Expression ']'
 | IDENTIFIER
IdentifierOrWithIdentifier ::= IDENTIFIER | WITH_IDENTIFIER

ArrayLiteralExpression ::= '[' ArrayElementsList? ']'
{ pin = 1 }
ArrayElementsList ::= ArrayElement? ElementsListTail*
ElementsListTail ::= ',' ArrayElement?
{ pin = 1 }
ArrayElement ::= Expression
{ recoverWhile = ArrayElement_recover }
private ArrayElement_recover ::= !(',' | ']' | StatementEnd)

ObjectLiteralExpression ::= '{' PropertiesList? '}'
{ pin = 1 }
PropertiesList ::= PropertyAssignment PropertiesListTail*
PropertiesListTail ::= ',' PropertyAssignment
{ pin = 1 }
PropertyAssignment ::= PropertyName ':' Expression
{ recoverWhile = PropertyAssignment_recover }
PropertyName ::= IDENTIFIER | STRING_LITERAL | NUMERIC_LITERAL
private PropertyAssignment_recover ::= !(',' | '}' | StatementEnd)

ParenthesesExpression ::= '(' Expression ')'

MemberExpression ::= PrimaryGroup MemberExpressionTail?
MemberExpressionTail ::= ('[' Expression ']' | '.' IDENTIFIER | CallArguments) MemberExpressionTail?

CallArguments ::= '(' CallArgumentsList? ')'
{ pin = 1 }
CallArgumentsList ::= CallArgument CallArgumentsListTail*
CallArgumentsListTail ::= ',' CallArgument
{ pin = 1 }
CallArgument ::= Expression
{ recoverWhile = CallArgument_recover }
private CallArgument_recover ::= !(',' | ')' | StatementEnd)

TernaryExpression ::= Expression '?' Expression ':' Expression

NewExpression ::= NEW Expression
VoidExpression ::= VOID Expression
DeleteExpression ::= DELETE Expression
TypeofExpression ::= TYPEOF Expression
InExpression ::= Expression IN Expression
InstanceofExpression ::= Expression INSTANCEOF Expression
AwaitExpression ::= AWAIT Expression
RegularExpression ::= REGEXP
